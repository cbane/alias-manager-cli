#!/usr/bin/env python

# Manages a database-backed list of email aliases.
# Copyright (C) 2010, 2011, 2013  Courtney Bane

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import sys
from configobj import ConfigObj
from validate import Validator
import argparse
import sqlalchemy as sa
import sqlalchemy.exc
from sqlalchemy.ext.declarative import declarative_base
import csv
import random
import os.path
import re

DESCRIPTION = 'Manages a database-backed list of email aliases'
VERSION = 'Alias Manager v1'

CONFIGSPEC = {
    'database': {
        'driver': 'string',
        'host': 'string(default=None)',
        'port': 'integer(default=None)',
        'dbname': 'string',
        'table': 'string(default=None)',
        'user': 'string(default=None)',
        'password': 'string(default=None)',
        },
    'add': {
        'digits': 'integer(min=0, default=0)',
        'target': 'string(default=None)',
        }
    }

Base = declarative_base()

class Alias(Base):
    __tablename__ = 'aliases'
    __table_args__ = {'mysql_engine':'InnoDB'}
    alias = sa.Column(sa.String(255), primary_key=True, nullable=False)
    destination = sa.Column(sa.String(255), nullable=False)
    enabled = sa.Column(sa.Boolean, default=True)

    def __init__(self, alias, destination, enabled=True):
        self.alias = alias
        self.destination = destination
        self.enabled = enabled

    def __repr__(self):
        return "<Alias('%s','%s',%s)>" % (self.alias, self.destination, self.enabled)

def main():
    config = ConfigObj(os.path.expanduser('~/.alias-manager.conf'),
                       configspec=CONFIGSPEC)
    val = Validator()
    result = config.validate(val)
    if result != True:
        raise SystemExit('Error loading config file')
    
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-v', '--version', action='version', version=VERSION)

    subparsers = parser.add_subparsers(title='actions',
                                       dest='command')

    parser_list = subparsers.add_parser('list', help='list aliases')
    parser_list.add_argument('--alias-only', action='store_true',
                             help='Only print aliases (no destinations)')
    parser_list.add_argument('--enabled', action='store_false', dest='filter', default=None,
                             help='Only print enabled aliases')
    parser_list.add_argument('--disabled', action='store_true', dest='filter',
                             help='Only print disabled aliases')
    parser_list.add_argument('alias', metavar='ALIAS', nargs='?',
                             help='Alias (or substring) to search for')
    parser_list.set_defaults(func=list_cmd)
    
    parser_add = subparsers.add_parser('add', help='add an alias')
    parser_add.add_argument('-d', '--digits', metavar='DIGITS', type=int,
                            default=config['add']['digits'],
                            help='number of digits to add')
    parser_add.add_argument('alias', metavar='ALIAS', help='alias to add')
    if config['add']['target']:
        target_nargs = '?'
    else:
        target_nargs = None
    parser_add.add_argument('target', metavar='TARGET', nargs=target_nargs,
                            default=config['add']['target'],
                            help='target of alias')
    parser_add.set_defaults(func=add_cmd)
    
    parser_remove = subparsers.add_parser('remove', help='remove an alias')
    parser_remove.add_argument('alias', metavar='ALIAS', help='alias to remove')
    parser_remove.set_defaults(func=remove_cmd)
    
    parser_enable = subparsers.add_parser('enable', help='enable an alias')
    parser_enable.add_argument('alias', metavar='ALIAS', help='alias to enable')
    parser_enable.set_defaults(func=enable_cmd, enabled=True)
    
    parser_disable = subparsers.add_parser('disable', help='disable an alias')
    parser_disable.add_argument('alias', metavar='ALIAS', help='alias to disable')
    parser_disable.set_defaults(func=enable_cmd, enabled=False)

    parser_import = subparsers.add_parser('import', help='import alias list')
    parser_import.add_argument('-f', '--force', action='store_true',
                               help='overwrite existing aliases')
    parser_import.add_argument('file', metavar='FILE', nargs='?',
                               type=argparse.FileType('r'), default=sys.stdin,
                               help='file to import from (default: STDIN)')
    parser_import.set_defaults(func=import_cmd)
    
    parser_export = subparsers.add_parser('export', help='export alias list')
    parser_export.add_argument('file', metavar='FILE', nargs='?',
                               type=argparse.FileType('w'), default=sys.stdout,
                               help='file to export to (default: STDOUT)')
    parser_export.set_defaults(func=export_cmd)

    args = parser.parse_args()
    session = init_db(config=config['database'])
    args.func(session, args)
        
def init_db(config, echo=False):
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy.engine.url import URL

    url = URL(drivername=config['driver'],
              username=config['user'],
              password=config['password'],
              host=config['host'],
              port=config['port'],
              database=config['dbname'])
    if 'table' in config and config['table']:
        change_table_name(Base.metadata, Alias, config['table'])
    engine = sa.create_engine(url, echo=echo)
    Base.metadata.create_all(engine)
    session = sessionmaker(bind=engine)()
    return session

def change_table_name(metadata, cls, name):
    old_name = cls.__table__.name
    schema = cls.__table__.schema

    if name == old_name:
        return

    cls.__table__.name = name
    if schema:
        cls.__table__.fullname = '%s.%s' % (schema, name)
    else:
        cls.__table__.fullname = name
    metadata._remove_table(old_name, schema)
    metadata._add_table(name, schema, cls.__table__)

def list_cmd(session, args):
    if args.alias:
        search = '%{0}%'.format(args.alias)
    else:
        search = '%'
    aliases = session.query(Alias).filter(Alias.alias.like(search)).order_by(Alias.alias).all()

    max_len = reduce(max, [len(alias.alias) for alias in aliases], 0)

    for alias in aliases:
        if alias.enabled:
            disabled = ''
        else:
            disabled = ' (disabled)'
        if args.filter == alias.enabled:
            continue
        if args.alias_only:
            print(alias.alias)
        else:
            print('{0.alias:{1}} -> {0.destination}{2}'.format(alias, max_len, disabled))
    
def add_cmd(session, args):
    atom = r'[a-z0-9!#$%&\'*+/=?^_`{}|~-]+'
    dot_atom = r'^' + atom + r'(\.' + atom + r')*$'
    if not re.match(dot_atom, args.alias, re.I):
        raise InvalidAlias(args.alias)

    if args.digits > 0:
        alias_str = '{0}-{1:0{2}}'.format(args.alias, gen_random(args.digits),
                                          args.digits)
    else:
        alias_str = args.alias
    alias = Alias(alias_str, args.target)
    session.add(alias)
    try:
        session.commit()
    except sqlalchemy.exc.IntegrityError:
        raise DuplicateAlias(alias_str)
    print('Added alias {0}'.format(alias_str))

def remove_cmd(session, args):
    query = session.query(Alias).filter(Alias.alias==args.alias)

    if not query.first():
        raise NoSuchAlias(args.alias)
    
    query.delete()
    session.commit()
    print('Deleted alias {0}'.format(args.alias))

def enable_cmd(session, args):
    if args.enabled:
        op = 'Enabled'
    else:
        op = 'Disabled'
    alias = session.query(Alias).filter(Alias.alias==args.alias).first()
    if not alias:
        raise NoSuchAlias(args.alias)
    alias.enabled = args.enabled
    session.commit()
    print('{0} alias {1}'.format(op, alias.alias))

def import_cmd(session, args):
    csvfile = csv.DictReader(args.file, ('alias', 'destination', 'enabled'))
    for entry in csvfile:
        entry['enabled'] = bool(entry['enabled'])
        alias = session.query(Alias).filter(Alias.alias==entry['alias']).first()
        if not alias:
            alias = Alias(**entry)
            session.add(alias)
            print("Imported alias '{0.alias}'".format(alias))
        elif args.force:
            alias.destination = entry['destination']
            alias.enabled = entry['enabled']
            print("Updated alias '{0.alias}'".format(alias))
        else:
            print("Skipped existing alias '{0[alias]}'".format(entry))
    session.commit()

def export_cmd(session, args):
    csvfile = csv.writer(args.file)
    aliases = session.query(Alias).order_by(Alias.alias).all()
    for alias in aliases:
        csvfile.writerow((alias.alias, alias.destination, alias.enabled))

def gen_random(digits):
    return random.randrange(10 ** digits)

class NoSuchAlias(SystemExit):
    def __init__(self, alias):
        super(NoSuchAlias, self).__init__('No such alias: {0}'.format(alias))

class DuplicateAlias(SystemExit):
    def __init__(self, alias):
        super(DuplicateAlias, self).__init__('Alias already exists: {0}'.format(alias))

class InvalidAlias(SystemExit):
    def __init__(self, alias):
        super(InvalidAlias, self).__init__('Invalid alias: {0}'.format(alias))

if __name__ == "__main__":
    main()
